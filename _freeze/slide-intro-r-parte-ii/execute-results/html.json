{
  "hash": "b1c3e2de5247e18167483e7d7e1229c3",
  "result": {
    "markdown": "---\ntitle: \"Introdução ao R - Parte II\"\nsubtitle: \"Oficina de Introdução ao R\"\nauthor: \"[R-Ladies São Paulo](https://www.meetup.com/rladies-sao-paulo/)\"\ndate: \"2023-10-28\"\nformat: \n  rladies-revealjs:\n    footer: \"Slides feitos com [Quarto](https://quarto.org/docs/presentations/revealjs/index.html) e [Quarto R-Ladies Theme](https://github.com/beatrizmilz/quarto-rladies-theme#quarto-r-ladies-theme).\"\nincremental: false\nknitr:\n  opts_chunk: \n    fig.align: \"center\"\n    echo: true\n    eval: true\n---\n\n\n# Conceitos iniciais de programação\n\n## Scripts\n\n-   Podemos salvar nossos scripts para utilizar depois!\n\n-   Considere tudo no console como temporário, pois não salvamos o conteúdo.\n\n-   Escreva no Script/Editor os códigos importantes para a análise.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://r4ds.hadley.nz/diagrams/rstudio-editor.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## R como uma calculadora\n\n-   Podemos usar o R como uma calculadora:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1 / 200 * 30\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.15\n```\n:::\n\n```{.r .cell-code}\n(59 + 73 + 2) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 44.66667\n```\n:::\n:::\n\n\n## Executando códigos\n\n-   O atalho `Cmd/Ctrl + Enter` é um dos mais úteis! Executa o código selecionado, ou o trecho de código onde o cursor está.\n\n-   O atalho `Cmd/Ctrl + Shift + S` executa todos os códigos do script!\n\n## Criando objetos\n\n-   Podemos criar objetos (e guardar resultados) usando o operador de atribuição `<-`, e a estrutura a seguir:\n\n````         \n``` {{r}}\nnome_do_objeto <- valor\n```\n````\n\nExemplo:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- 3 * 4\n```\n:::\n\n\nPodemos ver o conteúdo do objeto escrevendo o nome e executando:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\n## Boas práticas e objetos\n\n-   Atalho `Alt -` (Alt e menos) serve para escrever o sinal de atribuição mais rápido.\n\n-   O sinal `=` também funciona neste caso: porém como boa prática de escrita de código nós não usamos\n\n-   Aproveite para usar a tecla Tab no RStudio: ajuda a autocompletar!\n\n-   O R é *case sensitive*: ele diferencia letras maiúsculas e minúsculas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nr_rocks <- 2 ^ 3\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nr_rock\n#> Error: object 'r_rock' not found\nR_rocks\n#> Error: object 'R_rocks' not found\nr_rocks\n#> [1] 8\n```\n:::\n\n\n## Boas práticas e objetos\n\n-   Erros de digitação e de maiúscula/minúscula importam!\n\n-   Cuidado ao dar nomes aos objetos:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\neu_uso_snake_case\noutrasPessoasUsamCamelCase\nalgumas.pessoas.usam.pontos\nE_Algumas.Pessoas_RENUNCIAMconvenções\n```\n:::\n\n\n## Entendendo melhor um objeto\n\nUm objeto é onde nossos dados são armazenados dentro do R.\n\nUm objeto sempre tem uma **classe** e um **tipo**\n\nGeralmente chamamos de \"valor\" tudo o que está dentro de um objeto, PORÉM:\n\n-   Valores não precisam ser números.\n-   Eles podem ser texto, por exemplo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npessoa <- \"Bruna\"\npessoa \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Bruna\"\n```\n:::\n:::\n\n\n## As classes dos objetos\n\n-   Os objetos podem conter dados de diferentes naturezas (um texto, um número, um booleano). **É o quê estamos armazenando. Principais:**\n\n| CLASSE        | SINÔNIMO                                              |\n|---------------|-------------------------------------------------------|\n| **character** | texto, string, caractere                              |\n| **integer**   | números inteiros                                      |\n| **numeric**   | números racionais (número representado por uma fração |\n| **logic**     | lógico, booleano, valor TRUE/FALSE                    |\n\n## Exemplos de classes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnome <- 'Rladies' # texto\nnome\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Rladies\"\n```\n:::\n\n```{.r .cell-code}\nidade <- '40' # texto\nidade\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"40\"\n```\n:::\n\n```{.r .cell-code}\nidade2 <- 40L # numero inteiro\nidade2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40\n```\n:::\n\n```{.r .cell-code}\npassagem <- 4.40 # numero decimal\npassagem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.4\n```\n:::\n:::\n\n\n## Exemplos de classes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsou_linda <- TRUE # booleano\nsou_linda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Exemplos de classes\n\nDICA: a função `class()` mostra a classe de um objeto\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnome <- 'R-ladies SP'\nclass(nome)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\npassagem <- 4.40\nclass(passagem)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Os tipos de objetos\n\nÉ como armazenamos os dados dentro do R. Principais neste momento:\n\n**Vector:** armazena elementos de mesma classe.\n\n**Data.frame:** são tabelas de dados com linhas e colunas, como uma tabela do Excel. C ada coluna pode ser de classe diferente. Dentro de cada coluna, teremos sempre a mesma classe!\n\n## NA\n\nUma característica importante do R que pode dicultar a comparação são os valores ausentes ou NAs (não disponíveis).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nNA > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nNA == NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n`is.na()` é a função que testa se um objeto é NA\n\n## Operadores relacionais\n\n| Operador | Descrição          |\n|----------|--------------------|\n| ==       | igual              |\n| !=       | diferente          |\n| \\>       | maior              |\n| \\<       | menor              |\n| \\>=      | maior ou igual a   |\n| \\<=      | menor ou igual que |\n\n## Operadores lógicos\n\n| Operador | Descrição          |\n|----------|--------------------|\n| !        | significa NÃO      |\n| &        | significa E        |\n| `|`      | significa OU       |\n| %in%     | significa \"contém\" |\n\n## O que é uma função?\n\n-   Função: uma palavra que, no código, dá um comando ao computador.\n-   Ela é escrita seguida de parênteses.\n-   Nos parênteses incluímos os argumentos.\n-   O output vai ser a informação que o computador retorna após rodar a função.\n\n(pense nela como um **verbo**!)\n\n## Função no R\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\naltura_carol <- 1.54\naltura_lucas <- 1.89\naltura_media <- mean(c(altura_carol, altura_lucas))\naltura_media\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.715\n```\n:::\n:::\n\n\n<br>\n\n-   mean = função para calcular a média\n-   argumentos = informações que vão entre parênteses para indicar o que a função deve fazer\n-   c() = para criar um vetor (uma lista com mais de um item a ser aplicado no cálculo)\n\n## Utilizando funções\n\n-   O R possui muitas funções disponíveis\n\n-   Estrutura para utilizar uma função:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnome_da_funcao(nome_do_argumento_1 = valor_para_o_argumento1,\n               nome_do_argumento_2 = valor_para_o_argumento2,\n               nome_do_argumento_3 = valor_para_o_argumento3,\n               ...)\n```\n:::\n\n\nExemplo:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nseq(from = 1, to = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n-   Parênteses (e aspas) sempre devem estar em \"duplas\": se abrirmos, temos que fechar.\n\n## O que é um pacote de R?\n\n-   Conjunto de funções úteis pra determinada análise.\n\n-   Eles são disponibilizados em repositórios. Os dois principais repositórios são o [CRAN](https://cran.r-project.org/) e o [GitHub](https://github.com/).\n\n-   Os pacotes são **instalados apenas uma vez** e devem **ser carregados sempre** que queremos utilizá-los.\n\n## Instalar e carregar pacotes\n\n-   Para instalar um pacote que está no CRAN, usamos a função install.packages:\n\n``` r\ninstall.packages(\"tidyverse\")\n```\n\n-   Caso o pacote esteja no GitHub, é possível fazer a instalação via função install_github do pacote devtools:\n\n``` r\ninstall.packages(\"devtools\")\n\ndevtools::install_github('rfsaldanha/microdatasus')\n```\n\n-   Para carregar o pacote usamos a função library:\n\n``` r\nlibrary(tidyverse)\n```\n\n## Boas práticas (resumo)\n\n**Nome de variáveis:**\n\na)  Não usar maiúscula, espaços ou acentos pra criar o nome\nb)  Não começar o nome com um número\nc)  Escolher nomes úteis e não redundantes\n\n**Código e comentários:**\n\na)  Inserir espaços só após as vírgulas e parênteses\nb)  Comente seu código (com a hashtag #)\nc)  Use a quebra de linha para facilitar a leitura\n\n## Erros mais comuns!\n\n-   Rodar uma linha de código sem ter rodado as anteriores, que fazem parte de uma \"sequência\" de comandos para o programa\n\n-   Pequenos erros de digitação ao escrever o código\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}